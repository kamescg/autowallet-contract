{
  "address": "0xa87987985aF471b6e79AD463E8FB8858704b02bD",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fede0df0d1f50aea828f109786fbe89c0e95fc6da6f4090933f1f32265a644f",
  "receipt": {
    "to": null,
    "from": "0x94996399E8c5667f377460D0f3A5037BfC6c1275",
    "contractAddress": "0xa87987985aF471b6e79AD463E8FB8858704b02bD",
    "transactionIndex": 0,
    "gasUsed": "888688",
    "logsBloom": "0x
    "blockHash": "0xb49c8fd584edd2e3d18f72bbf6cbdc1fd87c1190cb11ff929384332cc03b59e1",
    "transactionHash": "0x6fede0df0d1f50aea828f109786fbe89c0e95fc6da6f4090933f1f32265a644f",
    "logs": [],
    "blockNumber": 13389804,
    "cumulativeGasUsed": "888688",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e82da98fc643eb2d801cdf4763a64269",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/VirtualMachine.sol\":\"VirtualMachine\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/core/CommandBuilder.sol\":{\"content\":\"pragma solidity ^0.8.6;\\n\\nuint256 constant IDX_VARIABLE_LENGTH = 0x80;\\nuint256 constant IDX_VALUE_MASK = 0x7f;\\nuint256 constant IDX_END_OF_ARGS = 0xff;\\nuint256 constant IDX_USE_STATE = 0xfe;\\n\\nlibrary CommandBuilder {\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 count = 0; // Number of bytes in whole ABI encoded message\\n        uint256 free = 0; // Pointer to first free byte in tail part of message\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 idx;\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i = 0; i < 32; i++) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    count += stateData.length;\\n                    free += 32;\\n                } else {\\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n                    require(\\n                        arglen % 32 == 0,\\n                        \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n                    );\\n                    count += arglen + 32;\\n                    free += 32;\\n                }\\n            } else {\\n                require(\\n                    state[idx & IDX_VALUE_MASK].length == 32,\\n                    \\\"Static state variables must be 32 bytes\\\"\\n                );\\n                count += 32;\\n                free += 32;\\n            }\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        for (uint256 i = 0; i < 32; i++) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    free += stateData.length - 32;\\n                    count += 32;\\n                } else {\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n\\n                    // Variable length data; put a pointer in the slot and write the data at the end\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        arglen\\n                    );\\n                    free += arglen;\\n                    count += 32;\\n                }\\n            } else {\\n                // Fixed length data; write it directly\\n                bytes memory statevar = state[idx & IDX_VALUE_MASK];\\n                assembly {\\n                    mstore(add(add(ret, 36), count), mload(add(statevar, 32)))\\n                }\\n                count += 32;\\n            }\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argptr;\\n                assembly {\\n                    argptr := mload(add(output, 32))\\n                }\\n                require(\\n                    argptr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint8 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcidx,\\n        bytes memory dest,\\n        uint256 destidx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcidx),\\n                    len,\\n                    add(add(dest, 32), destidx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42d042aee3f3d1d8937d2e47d0ecfe9f0294af8811d745c4355a55ed2bf5a18c\"},\"contracts/core/VirtualMachine.sol\":{\"content\":\"pragma solidity ^0.8.6;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nuint8 constant FLAG_CT_DELEGATECALL = 0x00;\\nuint8 constant FLAG_CT_CALL = 0x01;\\nuint8 constant FLAG_CT_STATICCALL = 0x02;\\nuint8 constant FLAG_CT_VALUECALL = 0x03;\\nuint8 constant FLAG_CT_MASK = 0x03;\\nuint8 constant FLAG_EXTENDED_COMMAND = 0x80;\\nuint8 constant FLAG_TUPLE_RETURN = 0x40;\\n\\nuint256 constant SHORT_COMMAND_FILL = 0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\ncontract VirtualMachine {\\n    using CommandBuilder for bytes[];\\n\\n    address immutable self;\\n\\n    modifier ensureDelegateCall() {\\n        require(address(this) != self);\\n        _;\\n    }\\n\\n    constructor() {\\n        self = address(this);\\n    }\\n\\n    function execute(bytes32[] calldata commands, bytes[] memory state)\\n        public\\n        ensureDelegateCall\\n        returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outdata;\\n\\n        for (uint256 i = 0; i < commands.length; i++) {\\n            command = commands[i];\\n            flags = uint8(bytes1(command << 32));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                indices = commands[i++];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outdata) = address(uint160(uint256(command))) // target\\n                .delegatecall(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outdata) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outdata) = address(uint160(uint256(command))) // target\\n                .staticcall(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 calleth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                assembly {\\n                    mstore(calleth, add(v, 0x20))\\n                }\\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\\n                    value: calleth\\n                }(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        bytes32(uint256(indices << 8) | IDX_END_OF_ARGS)\\n                    )\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            require(success, \\\"Call failed\\\");\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outdata);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outdata);\\n            }\\n        }\\n        return state;\\n    }\\n}\\n\",\"keccak256\":\"0x706b4acb2c89cedfcb96524ebf724ef3c9bd8f4ad8dfd03897aa1ac4f477326e\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5030606081901b608052610f23610031600039600060730152610f236000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de792d5f14610030575b600080fd5b61004361003e366004610a7c565b610059565b6040516100509190610cdc565b60405180910390f35b60603073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141561009e57600080fd5b600080600080606060005b8881101561043b578989828181106100c3576100c3610ec1565b602002919091013596505060d886901c60ff811695506080161561010c578989826100ed81610e50565b93508181106100fe576100fe610ec1565b905060200201359350610130565b602886901b79ffffffffffffffffffffffffffffffffffffffffffffffffffff1793505b600385166101b25773ffffffffffffffffffffffffffffffffffffffff861661015a89888761044c565b6040516101679190610cc0565b600060405180830381855af49150503d80600081146101a2576040519150601f19603f3d011682016040523d82523d6000602084013e6101a7565b606091505b5090935091506103ad565b600385166001141561022a5773ffffffffffffffffffffffffffffffffffffffff86166101e089888761044c565b6040516101ed9190610cc0565b6000604051808303816000865af19150503d80600081146101a2576040519150601f19603f3d011682016040523d82523d6000602084013e6101a7565b60038516600214156102a05773ffffffffffffffffffffffffffffffffffffffff861661025889888761044c565b6040516102659190610cc0565b600060405180830381855afa9150503d80600081146101a2576040519150601f19603f3d011682016040523d82523d6000602084013e6101a7565b6003858116141561036057600080898660f81c60ff16815181106102c6576102c6610ec1565b6020908102919091018101519081018352905073ffffffffffffffffffffffffffffffffffffffff8816826103038c8b60088b901b60ff1761044c565b6040516103109190610cc0565b60006040518083038185875af1925050503d806000811461034d576040519150601f19603f3d011682016040523d82523d6000602084013e610352565b606091505b5090955093506103ad915050565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c69642063616c6c747970650000000000000000000000000000000060448201526064015b60405180910390fd5b826103fa5760405162461bcd60e51b815260206004820152600b60248201527f43616c6c206661696c656400000000000000000000000000000000000000000060448201526064016103a4565b60408516156104175761041288605888901b84610839565b610429565b61042688605888901b846108e1565b97505b8061043381610e50565b9150506100a9565b5086955050505050505b9392505050565b60606000808281805b60208110156106685786816020811061047057610470610ec1565b1a915060ff82141561048157610668565b60808216156105a85760fe8214156104dc5782516104bc57886040516020016104aa9190610cdc565b60405160208183030381529060405292505b82516104c89086610df1565b94506104d5602085610df1565b9350610656565b600089607f8416815181106104f3576104f3610ec1565b602002602001015151905060208161050b9190610e89565b1561057e5760405162461bcd60e51b815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f662033322062797465730000000000000000000060648201526084016103a4565b610589816020610df1565b6105939087610df1565b95506105a0602086610df1565b945050610656565b88607f8316815181106105bd576105bd610ec1565b60200260200101515160201461063b5760405162461bcd60e51b815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f322062797465730000000000000000000000000000000000000000000000000060648201526084016103a4565b610646602086610df1565b9450610653602085610df1565b93505b8061066081610e50565b915050610455565b50610674846004610df1565b67ffffffffffffffff81111561068c5761068c610ed7565b6040519080825280601f01601f1916602001820160405280156106b6576020820181803683370190505b5094508660208601526000935060005b602081101561082d578681602081106106e1576106e1610ec1565b1a915060ff8214156106f25761082d565b60808216156107dd5760fe82141561075e578585016024018490526107328360208861071f886004610df1565b6020885161072d9190610e09565b610a62565b602083516107409190610e09565b61074a9085610df1565b9350610757602086610df1565b945061081b565b600089607f84168151811061077557610775610ec1565b602002602001015151905084866024890101526107be8a607f8516815181106107a0576107a0610ec1565b60200260200101516000898860046107b89190610df1565b85610a62565b6107c88186610df1565b94506107d5602087610df1565b95505061081b565b600089607f8416815181106107f4576107f4610ec1565b602002602001015190506020810151866024890101526020866108179190610df1565b9550505b8061082581610e50565b9150506106c6565b50505050509392505050565b60f882901c60ff81141561084d5750505050565b60008251602061085d9190610df1565b67ffffffffffffffff81111561087557610875610ed7565b6040519080825280601f01601f19166020018201604052801561089f576020820181803683370190505b50858360ff16815181106108b5576108b5610ec1565b6020026020010181905290506108d18360008360208751610a62565b8251806020830152505050505050565b606060f883901c60ff8114156108fa5784915050610445565b60808116156109c05760fe81141561092757828060200190518101906109209190610bcf565b9450610a59565b6020838101519081146109a25760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c65290000000000000000000000000000000000000000000060648201526084016103a4565b508251601f19016020848101918252607f8316810287010152610a59565b8251602014610a375760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287374617469632900000000000000000000000000000000000000000000000060648201526084016103a4565b8285607f831681518110610a4d57610a4d610ec1565b60200260200101819052505b50929392505050565b808260208501018286602089010160045afa505050505050565b600080600060408486031215610a9157600080fd5b833567ffffffffffffffff80821115610aa957600080fd5b818601915086601f830112610abd57600080fd5b813581811115610acc57600080fd5b602088818360051b8601011115610ae257600080fd5b808401965081955080880135935082841115610afd57600080fd5b838801935088601f850112610b1157600080fd5b83359150610b26610b2183610da5565b610d74565b8083825282820191508286018b848660051b8901011115610b4657600080fd5b60005b85811015610bbd57813587811115610b6057600080fd5b8801603f81018e13610b7157600080fd5b85810135610b81610b2182610dc9565b8181528f6040838501011115610b9657600080fd5b81604084018983013760009181018801919091528552509284019290840190600101610b49565b50508096505050505050509250925092565b60006020808385031215610be257600080fd5b825167ffffffffffffffff80821115610bfa57600080fd5b818501915085601f830112610c0e57600080fd5b8151610c1c610b2182610da5565b80828252858201915085850189878560051b8801011115610c3c57600080fd5b60005b84811015610cb157815186811115610c5657600080fd5b8701603f81018c13610c6757600080fd5b888101516040610c79610b2183610dc9565b8281528e82848601011115610c8d57600080fd5b610c9c838d8301848701610e20565b87525050509287019290870190600101610c3f565b50909998505050505050505050565b60008251610cd2818460208701610e20565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d67577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845281518051808752610d48818989018a8501610e20565b601f01601f191695909501860194509285019290850190600101610d03565b5092979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d9d57610d9d610ed7565b604052919050565b600067ffffffffffffffff821115610dbf57610dbf610ed7565b5060051b60200190565b600067ffffffffffffffff821115610de357610de3610ed7565b50601f01601f191660200190565b60008219821115610e0457610e04610eab565b500190565b600082821015610e1b57610e1b610eab565b500390565b60005b83811015610e3b578181015183820152602001610e23565b83811115610e4a576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e8257610e82610eab565b5060010190565b600082610ea657634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220495258f341791703a381e114e054738e90fd282bc303f57462643e9a9048453e64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de792d5f14610030575b600080fd5b61004361003e366004610a7c565b610059565b6040516100509190610cdc565b60405180910390f35b60603073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141561009e57600080fd5b600080600080606060005b8881101561043b578989828181106100c3576100c3610ec1565b602002919091013596505060d886901c60ff811695506080161561010c578989826100ed81610e50565b93508181106100fe576100fe610ec1565b905060200201359350610130565b602886901b79ffffffffffffffffffffffffffffffffffffffffffffffffffff1793505b600385166101b25773ffffffffffffffffffffffffffffffffffffffff861661015a89888761044c565b6040516101679190610cc0565b600060405180830381855af49150503d80600081146101a2576040519150601f19603f3d011682016040523d82523d6000602084013e6101a7565b606091505b5090935091506103ad565b600385166001141561022a5773ffffffffffffffffffffffffffffffffffffffff86166101e089888761044c565b6040516101ed9190610cc0565b6000604051808303816000865af19150503d80600081146101a2576040519150601f19603f3d011682016040523d82523d6000602084013e6101a7565b60038516600214156102a05773ffffffffffffffffffffffffffffffffffffffff861661025889888761044c565b6040516102659190610cc0565b600060405180830381855afa9150503d80600081146101a2576040519150601f19603f3d011682016040523d82523d6000602084013e6101a7565b6003858116141561036057600080898660f81c60ff16815181106102c6576102c6610ec1565b6020908102919091018101519081018352905073ffffffffffffffffffffffffffffffffffffffff8816826103038c8b60088b901b60ff1761044c565b6040516103109190610cc0565b60006040518083038185875af1925050503d806000811461034d576040519150601f19603f3d011682016040523d82523d6000602084013e610352565b606091505b5090955093506103ad915050565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c69642063616c6c747970650000000000000000000000000000000060448201526064015b60405180910390fd5b826103fa5760405162461bcd60e51b815260206004820152600b60248201527f43616c6c206661696c656400000000000000000000000000000000000000000060448201526064016103a4565b60408516156104175761041288605888901b84610839565b610429565b61042688605888901b846108e1565b97505b8061043381610e50565b9150506100a9565b5086955050505050505b9392505050565b60606000808281805b60208110156106685786816020811061047057610470610ec1565b1a915060ff82141561048157610668565b60808216156105a85760fe8214156104dc5782516104bc57886040516020016104aa9190610cdc565b60405160208183030381529060405292505b82516104c89086610df1565b94506104d5602085610df1565b9350610656565b600089607f8416815181106104f3576104f3610ec1565b602002602001015151905060208161050b9190610e89565b1561057e5760405162461bcd60e51b815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f662033322062797465730000000000000000000060648201526084016103a4565b610589816020610df1565b6105939087610df1565b95506105a0602086610df1565b945050610656565b88607f8316815181106105bd576105bd610ec1565b60200260200101515160201461063b5760405162461bcd60e51b815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f322062797465730000000000000000000000000000000000000000000000000060648201526084016103a4565b610646602086610df1565b9450610653602085610df1565b93505b8061066081610e50565b915050610455565b50610674846004610df1565b67ffffffffffffffff81111561068c5761068c610ed7565b6040519080825280601f01601f1916602001820160405280156106b6576020820181803683370190505b5094508660208601526000935060005b602081101561082d578681602081106106e1576106e1610ec1565b1a915060ff8214156106f25761082d565b60808216156107dd5760fe82141561075e578585016024018490526107328360208861071f886004610df1565b6020885161072d9190610e09565b610a62565b602083516107409190610e09565b61074a9085610df1565b9350610757602086610df1565b945061081b565b600089607f84168151811061077557610775610ec1565b602002602001015151905084866024890101526107be8a607f8516815181106107a0576107a0610ec1565b60200260200101516000898860046107b89190610df1565b85610a62565b6107c88186610df1565b94506107d5602087610df1565b95505061081b565b600089607f8416815181106107f4576107f4610ec1565b602002602001015190506020810151866024890101526020866108179190610df1565b9550505b8061082581610e50565b9150506106c6565b50505050509392505050565b60f882901c60ff81141561084d5750505050565b60008251602061085d9190610df1565b67ffffffffffffffff81111561087557610875610ed7565b6040519080825280601f01601f19166020018201604052801561089f576020820181803683370190505b50858360ff16815181106108b5576108b5610ec1565b6020026020010181905290506108d18360008360208751610a62565b8251806020830152505050505050565b606060f883901c60ff8114156108fa5784915050610445565b60808116156109c05760fe81141561092757828060200190518101906109209190610bcf565b9450610a59565b6020838101519081146109a25760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c65290000000000000000000000000000000000000000000060648201526084016103a4565b508251601f19016020848101918252607f8316810287010152610a59565b8251602014610a375760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287374617469632900000000000000000000000000000000000000000000000060648201526084016103a4565b8285607f831681518110610a4d57610a4d610ec1565b60200260200101819052505b50929392505050565b808260208501018286602089010160045afa505050505050565b600080600060408486031215610a9157600080fd5b833567ffffffffffffffff80821115610aa957600080fd5b818601915086601f830112610abd57600080fd5b813581811115610acc57600080fd5b602088818360051b8601011115610ae257600080fd5b808401965081955080880135935082841115610afd57600080fd5b838801935088601f850112610b1157600080fd5b83359150610b26610b2183610da5565b610d74565b8083825282820191508286018b848660051b8901011115610b4657600080fd5b60005b85811015610bbd57813587811115610b6057600080fd5b8801603f81018e13610b7157600080fd5b85810135610b81610b2182610dc9565b8181528f6040838501011115610b9657600080fd5b81604084018983013760009181018801919091528552509284019290840190600101610b49565b50508096505050505050509250925092565b60006020808385031215610be257600080fd5b825167ffffffffffffffff80821115610bfa57600080fd5b818501915085601f830112610c0e57600080fd5b8151610c1c610b2182610da5565b80828252858201915085850189878560051b8801011115610c3c57600080fd5b60005b84811015610cb157815186811115610c5657600080fd5b8701603f81018c13610c6757600080fd5b888101516040610c79610b2183610dc9565b8281528e82848601011115610c8d57600080fd5b610c9c838d8301848701610e20565b87525050509287019290870190600101610c3f565b50909998505050505050505050565b60008251610cd2818460208701610e20565b9190910192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d67577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845281518051808752610d48818989018a8501610e20565b601f01601f191695909501860194509285019290850190600101610d03565b5092979650505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d9d57610d9d610ed7565b604052919050565b600067ffffffffffffffff821115610dbf57610dbf610ed7565b5060051b60200190565b600067ffffffffffffffff821115610de357610de3610ed7565b50601f01601f191660200190565b60008219821115610e0457610e04610eab565b500190565b600082821015610e1b57610e1b610eab565b500390565b60005b83811015610e3b578181015183820152602001610e23565b83811115610e4a576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e8257610e82610eab565b5060010190565b600082610ea657634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220495258f341791703a381e114e054738e90fd282bc303f57462643e9a9048453e64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}