{
  "address": "0xcC70fcEe15eC3FA4B084E4CC787a05bdBD3F7A4a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFloanLoan",
          "type": "bool"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "TaskSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "TaskUnset",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "isSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "unset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d6c2d11af656da262fd94420108d2937ab2dddd2e335cb0c6f04f8bca4e1135",
  "receipt": {
    "to": null,
    "from": "0x94996399E8c5667f377460D0f3A5037BfC6c1275",
    "contractAddress": "0xcC70fcEe15eC3FA4B084E4CC787a05bdBD3F7A4a",
    "transactionIndex": 0,
    "gasUsed": "533676",
    "logsBloom": "0x
    "blockHash": "0x57c924a6b24ea9c4b11ce124faeb4545bc6b50b61488c6d852b002a34f8c1725",
    "transactionHash": "0x9d6c2d11af656da262fd94420108d2937ab2dddd2e335cb0c6f04f8bca4e1135",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13389805,
        "transactionHash": "0x9d6c2d11af656da262fd94420108d2937ab2dddd2e335cb0c6f04f8bca4e1135",
        "address": "0xcC70fcEe15eC3FA4B084E4CC787a05bdBD3F7A4a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000094996399e8c5667f377460d0f3a5037bfc6c1275"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x57c924a6b24ea9c4b11ce124faeb4545bc6b50b61488c6d852b002a34f8c1725"
      }
    ],
    "blockNumber": 13389805,
    "cumulativeGasUsed": "533676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e82da98fc643eb2d801cdf4763a64269",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFloanLoan\",\"type\":\"bool\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"TaskSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"TaskUnset\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"unset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AutoWallet Smart Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Set initial smart contract parameters during deploy.\"},\"isSet(bytes32)\":{\"notice\":\"Get\"},\"set(bytes32[],bytes[])\":{\"notice\":\"Set\"},\"unset(bytes32[],bytes[])\":{\"notice\":\"Unset\"}},\"notice\":\"The AutoWallet contract executes dynamic transactions using a EVM contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/AutoTaskList.sol\":\"AutoTaskList\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/core/AutoTaskList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IAutoTaskList.sol\\\";\\n/**\\n  * @title AutoWallet Smart Contract\\n  * @author Kames Geraghty\\n  * @notice The AutoWallet contract executes dynamic transactions using a EVM contract.\\n */\\ncontract AutoTaskList is IAutoTaskList, Ownable {\\n\\n    mapping(bytes32 => bool) internal tasks;\\n\\n    event TaskSet(\\n      bytes32 indexed id,\\n      bytes32[] commands, \\n      bytes[] state\\n    );\\n    \\n    event TaskUnset(\\n      bytes32 indexed id\\n    );\\n\\n    /**\\n      * @notice Set initial smart contract parameters during deploy.\\n    */\\n    constructor() Ownable() {}\\n\\n    /// @inheritdoc IAutoTaskList\\n    function set(bytes32[] calldata commands, bytes[] memory state) external onlyOwner override {\\n      bytes32 _id = keccak256(abi.encode(commands, state));\\n      tasks[_id] = true;\\n      emit TaskSet(_id, commands, state);\\n    }\\n    \\n    /// @inheritdoc IAutoTaskList\\n    function unset(bytes32[] calldata commands, bytes[] memory state) external onlyOwner override {\\n      bytes32 _id = keccak256(abi.encode(commands, state));\\n      tasks[_id] = false;\\n      emit TaskUnset(_id);\\n    }\\n    \\n    /// @inheritdoc IAutoTaskList\\n    function isSet(bytes32 _id) external view override returns (bool) {\\n      return tasks[_id];\\n    }\\n    \\n}\",\"keccak256\":\"0xf4c7c04a911e2cc0e9974297b13e84a3df937e96c1c200ab0982dff2cac721ab\",\"license\":\"MIT\"},\"contracts/core/CommandBuilder.sol\":{\"content\":\"pragma solidity ^0.8.6;\\n\\nuint256 constant IDX_VARIABLE_LENGTH = 0x80;\\nuint256 constant IDX_VALUE_MASK = 0x7f;\\nuint256 constant IDX_END_OF_ARGS = 0xff;\\nuint256 constant IDX_USE_STATE = 0xfe;\\n\\nlibrary CommandBuilder {\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 count = 0; // Number of bytes in whole ABI encoded message\\n        uint256 free = 0; // Pointer to first free byte in tail part of message\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 idx;\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i = 0; i < 32; i++) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    count += stateData.length;\\n                    free += 32;\\n                } else {\\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n                    require(\\n                        arglen % 32 == 0,\\n                        \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n                    );\\n                    count += arglen + 32;\\n                    free += 32;\\n                }\\n            } else {\\n                require(\\n                    state[idx & IDX_VALUE_MASK].length == 32,\\n                    \\\"Static state variables must be 32 bytes\\\"\\n                );\\n                count += 32;\\n                free += 32;\\n            }\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        for (uint256 i = 0; i < 32; i++) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    free += stateData.length - 32;\\n                    count += 32;\\n                } else {\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n\\n                    // Variable length data; put a pointer in the slot and write the data at the end\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        arglen\\n                    );\\n                    free += arglen;\\n                    count += 32;\\n                }\\n            } else {\\n                // Fixed length data; write it directly\\n                bytes memory statevar = state[idx & IDX_VALUE_MASK];\\n                assembly {\\n                    mstore(add(add(ret, 36), count), mload(add(statevar, 32)))\\n                }\\n                count += 32;\\n            }\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argptr;\\n                assembly {\\n                    argptr := mload(add(output, 32))\\n                }\\n                require(\\n                    argptr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint8 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcidx,\\n        bytes memory dest,\\n        uint256 destidx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcidx),\\n                    len,\\n                    add(add(dest, 32), destidx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42d042aee3f3d1d8937d2e47d0ecfe9f0294af8811d745c4355a55ed2bf5a18c\"},\"contracts/core/VirtualMachine.sol\":{\"content\":\"pragma solidity ^0.8.6;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nuint8 constant FLAG_CT_DELEGATECALL = 0x00;\\nuint8 constant FLAG_CT_CALL = 0x01;\\nuint8 constant FLAG_CT_STATICCALL = 0x02;\\nuint8 constant FLAG_CT_VALUECALL = 0x03;\\nuint8 constant FLAG_CT_MASK = 0x03;\\nuint8 constant FLAG_EXTENDED_COMMAND = 0x80;\\nuint8 constant FLAG_TUPLE_RETURN = 0x40;\\n\\nuint256 constant SHORT_COMMAND_FILL = 0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\ncontract VirtualMachine {\\n    using CommandBuilder for bytes[];\\n\\n    address immutable self;\\n\\n    modifier ensureDelegateCall() {\\n        require(address(this) != self);\\n        _;\\n    }\\n\\n    constructor() {\\n        self = address(this);\\n    }\\n\\n    function execute(bytes32[] calldata commands, bytes[] memory state)\\n        public\\n        ensureDelegateCall\\n        returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outdata;\\n\\n        for (uint256 i = 0; i < commands.length; i++) {\\n            command = commands[i];\\n            flags = uint8(bytes1(command << 32));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                indices = commands[i++];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outdata) = address(uint160(uint256(command))) // target\\n                .delegatecall(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outdata) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outdata) = address(uint160(uint256(command))) // target\\n                .staticcall(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 calleth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                assembly {\\n                    mstore(calleth, add(v, 0x20))\\n                }\\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\\n                    value: calleth\\n                }(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        bytes32(uint256(indices << 8) | IDX_END_OF_ARGS)\\n                    )\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            require(success, \\\"Call failed\\\");\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outdata);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outdata);\\n            }\\n        }\\n        return state;\\n    }\\n}\\n\",\"keccak256\":\"0x706b4acb2c89cedfcb96524ebf724ef3c9bd8f4ad8dfd03897aa1ac4f477326e\"},\"contracts/interfaces/IAutoTaskList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../core/VirtualMachine.sol\\\";\\n/**\\n  * @title IAutoTaskList Smart Contract\\n  * @author Kames Geraghty\\n  * @notice The IAutoTaskList interface defines storage of auto task structs.\\n */\\ninterface IAutoTaskList {\\n\\n    struct Task {\\n      bytes[] state;\\n      bytes32[] commands;\\n    }\\n\\n    event Executed(\\n        uint32 timestamp,\\n        bool isFloanLoan\\n    );\\n\\n    /**\\n      * @notice Set\\n    */\\n    function set(bytes32[] calldata commands, bytes[] memory state) external;\\n    \\n    /**\\n      * @notice Unset\\n    */\\n    function unset(bytes32[] calldata commands, bytes[] memory state) external;\\n\\n    /**\\n      * @notice Get\\n    */\\n    function isSet(bytes32 _id) external returns (bool);\\n    \\n\\n\\n}\\n\",\"keccak256\":\"0xa8e9f956742bf994ff0f4a06acb93a8597ec19b6606952267a88d9a4af0dd33d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6108408061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638d1e46a4116100505780638d1e46a4146100a75780638da5cb5b146100df578063f2fde38b1461010757600080fd5b806322e138d614610077578063715018a61461008c578063793cc74914610094575b600080fd5b61008a61008536600461050d565b61011a565b005b61008a6101f9565b61008a6100a236600461050d565b61026c565b6100ca6100b5366004610683565b60009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d6565b61008a6101153660046104d0565b61035f565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101865760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600083838360405160200161019d9392919061069c565b60408051601f19818403018152828252805160209182012060008181526001909252918120805460ff1916905590925082917fae3283f981866c17de6b7b7e8b2890d44620bc8e272c13fa9c6fd79305ae04349190a250505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161017d565b61026a600061045b565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102d35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161017d565b60008383836040516020016102ea9392919061069c565b60408051601f198184030181528282528051602091820120600081815260019283905292909220805460ff19169091179055915081907f72c24451fb9c98619023629fcf1acdfd99a2d62277c3fedd205bf4102435b783906103519087908790879061069c565b60405180910390a250505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161017d565b73ffffffffffffffffffffffffffffffffffffffff811661044f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161017d565b6104588161045b565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104e257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461050657600080fd5b9392505050565b60008060006040848603121561052257600080fd5b833567ffffffffffffffff8082111561053a57600080fd5b818601915086601f83011261054e57600080fd5b81358181111561055d57600080fd5b602088818360051b860101111561057357600080fd5b80840196508195508088013593508284111561058e57600080fd5b838801935088601f8501126105a257600080fd5b83359150828211156105b6576105b66107db565b8160051b6105c58282016107aa565b8381528281019086840183880185018d10156105e057600080fd5b600093505b85841015610671578035878111156105fc57600080fd5b8801603f81018e1361060d57600080fd5b8581013588811115610621576106216107db565b61063387601f19601f840116016107aa565b8181528f604083850101111561064857600080fd5b8160408401898301376000918101880191909152845250600193909301929184019184016105e5565b50809750505050505050509250925092565b60006020828403121561069557600080fd5b5035919050565b6040815282604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8411156106d557600080fd5b8360051b80866060850137808301905060608101600080825260206060868503018187015282875180855260808601915060808160051b8701019450828901845b82811015610799577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8088880301845281518051808952875b81811015610769578281018801518a8201890152870161074e565b81811115610779578888838c0101525b50601f01601f191697909701850196509284019290840190600101610716565b50949b9a5050505050505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156107d3576107d36107db565b604052919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220530c830e15fbe021837cb6df681fa3bc7bdf4a08e63ae9eb4c35a5a64581e25364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638d1e46a4116100505780638d1e46a4146100a75780638da5cb5b146100df578063f2fde38b1461010757600080fd5b806322e138d614610077578063715018a61461008c578063793cc74914610094575b600080fd5b61008a61008536600461050d565b61011a565b005b61008a6101f9565b61008a6100a236600461050d565b61026c565b6100ca6100b5366004610683565b60009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d6565b61008a6101153660046104d0565b61035f565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101865760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600083838360405160200161019d9392919061069c565b60408051601f19818403018152828252805160209182012060008181526001909252918120805460ff1916905590925082917fae3283f981866c17de6b7b7e8b2890d44620bc8e272c13fa9c6fd79305ae04349190a250505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161017d565b61026a600061045b565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102d35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161017d565b60008383836040516020016102ea9392919061069c565b60408051601f198184030181528282528051602091820120600081815260019283905292909220805460ff19169091179055915081907f72c24451fb9c98619023629fcf1acdfd99a2d62277c3fedd205bf4102435b783906103519087908790879061069c565b60405180910390a250505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103c65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161017d565b73ffffffffffffffffffffffffffffffffffffffff811661044f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161017d565b6104588161045b565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104e257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461050657600080fd5b9392505050565b60008060006040848603121561052257600080fd5b833567ffffffffffffffff8082111561053a57600080fd5b818601915086601f83011261054e57600080fd5b81358181111561055d57600080fd5b602088818360051b860101111561057357600080fd5b80840196508195508088013593508284111561058e57600080fd5b838801935088601f8501126105a257600080fd5b83359150828211156105b6576105b66107db565b8160051b6105c58282016107aa565b8381528281019086840183880185018d10156105e057600080fd5b600093505b85841015610671578035878111156105fc57600080fd5b8801603f81018e1361060d57600080fd5b8581013588811115610621576106216107db565b61063387601f19601f840116016107aa565b8181528f604083850101111561064857600080fd5b8160408401898301376000918101880191909152845250600193909301929184019184016105e5565b50809750505050505050509250925092565b60006020828403121561069557600080fd5b5035919050565b6040815282604082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8411156106d557600080fd5b8360051b80866060850137808301905060608101600080825260206060868503018187015282875180855260808601915060808160051b8701019450828901845b82811015610799577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8088880301845281518051808952875b81811015610769578281018801518a8201890152870161074e565b81811115610779578888838c0101525b50601f01601f191697909701850196509284019290840190600101610716565b50949b9a5050505050505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156107d3576107d36107db565b604052919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220530c830e15fbe021837cb6df681fa3bc7bdf4a08e63ae9eb4c35a5a64581e25364736f6c63430008060033",
  "devdoc": {
    "author": "Kames Geraghty",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AutoWallet Smart Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Set initial smart contract parameters during deploy."
      },
      "isSet(bytes32)": {
        "notice": "Get"
      },
      "set(bytes32[],bytes[])": {
        "notice": "Set"
      },
      "unset(bytes32[],bytes[])": {
        "notice": "Unset"
      }
    },
    "notice": "The AutoWallet contract executes dynamic transactions using a EVM contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/core/AutoTaskList.sol:AutoTaskList",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1953,
        "contract": "contracts/core/AutoTaskList.sol:AutoTaskList",
        "label": "tasks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}